apply plugin: 'com.android.application'

ext {
    version_sdk = [
        compileSdk : 26,
        buildTools : "26.0.1",
        minSdk     : 15,
        //targetSdk: compileSdk,
    ]
    version_sdk.targetSdk = version_sdk.compileSdk
    version_lib = [
        appcompat   : "26.0.0",
    ]
}

android {
    compileSdkVersion version_sdk.compileSdk
    buildToolsVersion version_sdk.buildTools

    defaultConfig {
        minSdkVersion version_sdk.minSdk
        targetSdkVersion version_sdk.targetSdk

        versionCode 1001
        versionName "0.11"
        applicationId "io.github.lonamiwebs.stringlate"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField("String[]", "APPLICATION_LANGUAGES", '{' + getUsedAndroidLanguages().collect {"\"${it}\""}.join(",")  + '}')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }
}

dependencies {
    // Android standard libs
    compile "com.android.support:appcompat-v7:${version_lib.appcompat}"
    compile "com.android.support:design:${version_lib.appcompat}"
    // Tool libraries
    // Include core project
    compile(project(':core')) {
        exclude(group: 'org.json', module: 'json')
        exclude(group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xmlpull')
    }
}

@SuppressWarnings(["UnnecessaryQualifiedReference", "SpellCheckingInspection"])
static String[] getUsedAndroidLanguages() {
    Set<String> langs = new HashSet<>()
    new File('.').eachFileRecurse(groovy.io.FileType.DIRECTORIES) {
        final foldername = it.name
        if (foldername.startsWith('values-') && !it.canonicalPath.contains("build" + File.separator + "intermediates")) {
            new File(it.toString()).eachFileRecurse(groovy.io.FileType.FILES) {
                if (it.name.toLowerCase().endsWith(".xml") && it.getCanonicalFile().getText('UTF-8').contains("<string")) {
                    langs.add(foldername.replace("values-", ""))

                }
            }
        }
    }
    return langs.toArray(new String[langs.size()])
}
